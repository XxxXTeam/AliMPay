name: Build and Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  GO_VERSION: '1.23'

jobs:
  # 代码质量检查
  lint:
    name: 代码检查
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
      
      - name: Verify dependencies
        run: |
          go mod verify
          go mod tidy
          git diff --exit-code go.mod go.sum
      
      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v4
        with:
          version: latest
          args: --timeout=10m --verbose
      
      - name: Check formatting
        run: |
          gofmt -s -l . | tee /tmp/gofmt.out
          test ! -s /tmp/gofmt.out
      
      - name: Run go vet
        run: go vet ./...

  # 单元测试
  test:
    name: 单元测试
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
      
      - name: Download dependencies
        run: go mod download
      
      - name: Create test directories
        run: |
          mkdir -p data logs qrcode configs
          touch configs/config.yaml
      
      - name: Run tests with race detector
        run: go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...
        timeout-minutes: 10
      
      - name: Generate coverage report
        run: go tool cover -html=coverage.txt -o coverage.html
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.txt
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
      
      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            coverage.txt
            coverage.html
          retention-days: 7

  # 构建测试
  build:
    name: 构建测试
    runs-on: ubuntu-latest
    needs: lint
    strategy:
      fail-fast: false
      matrix:
        include:
          - goos: linux
            goarch: amd64
          - goos: linux
            goarch: arm64
          - goos: darwin
            goarch: amd64
          - goos: darwin
            goarch: arm64
          - goos: windows
            goarch: amd64
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
      
      - name: Get build info
        id: build_info
        run: |
          echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          echo "COMMIT=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          echo "BUILD_TIME=$(date -u '+%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT
      
      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        run: |
          mkdir -p dist
          BINARY_NAME="alimpay-${{ matrix.goos }}-${{ matrix.goarch }}"
          if [ "$GOOS" = "windows" ]; then
            BINARY_NAME="${BINARY_NAME}.exe"
          fi
          
          go build -v \
            -ldflags="-s -w -X main.Version=${{ steps.build_info.outputs.VERSION }} -X main.Commit=${{ steps.build_info.outputs.COMMIT }} -X main.BuildTime=${{ steps.build_info.outputs.BUILD_TIME }}" \
            -o "dist/${BINARY_NAME}" \
            ./cmd/alimpay
          
          # 显示文件信息
          ls -lh dist/${BINARY_NAME}
      
      - name: Test binary execution
        if: matrix.goos == 'linux' && matrix.goarch == 'amd64'
        run: |
          ./dist/alimpay-linux-amd64 -version || echo "Version flag not implemented"
          file ./dist/alimpay-linux-amd64
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: alimpay-${{ matrix.goos }}-${{ matrix.goarch }}
          path: dist/
          retention-days: 7

  # 安全扫描
  security:
    name: 安全扫描
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
      
      - name: Run Gosec Security Scanner
        uses: securego/gosec@master
        with:
          args: '-fmt sarif -out gosec-results.sarif ./...'
        continue-on-error: true
      
      - name: Upload Gosec results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gosec-results.sarif
        continue-on-error: true
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
      
      - name: Upload Trivy results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # 生成构建摘要
  summary:
    name: 构建摘要
    runs-on: ubuntu-latest
    needs: [lint, test, build, security]
    if: always()
    steps:
      - name: Generate summary
        run: |
          echo "## 🎉 构建和测试完成" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 任务状态" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| 任务 | 状态 |" >> $GITHUB_STEP_SUMMARY
          echo "|------|------|" >> $GITHUB_STEP_SUMMARY
          echo "| 代码检查 | ${{ needs.lint.result == 'success' && '✅ 通过' || '❌ 失败' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 单元测试 | ${{ needs.test.result == 'success' && '✅ 通过' || '❌ 失败' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 构建测试 | ${{ needs.build.result == 'success' && '✅ 通过' || '❌ 失败' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 安全扫描 | ${{ needs.security.result == 'success' && '✅ 通过' || '⚠️ 需关注' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ℹ️ 构建信息" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **提交:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **分支:** \`${{ github.ref }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **触发者:** @${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Go 版本:** ${{ env.GO_VERSION }}" >> $GITHUB_STEP_SUMMARY

